;;implementing mergesort recursively 
(defun partition (lst)
  "Splits the list into two nearly equal halves."
  (let ((half (/ (length lst) 2)))  ;; Find midpoint
    (list (subseq lst 0 half)       ;; First half
          (subseq lst half))))       ;; Second half


          (defun mergesort (lst)
  "Sorts a list using the Merge Sort algorithm."
  (if (or (null lst) (null (cdr lst)))  ;; Base case: list with 0 or 1 element
      lst
      (let* ((halves (partition lst))   ;; Partition into two halves
             (left (mergesort (first halves)))
             (right (mergesort (second halves))))
        (merge-sorted left right))))   ;; Merge the two sorted halves


        (defun merge-sorted (lst1 lst2)
  "Merges two sorted lists into a single sorted list."
  (cond
    ((null lst1) lst2)  ;; If first list is empty, return second list
    ((null lst2) lst1)  ;; If second list is empty, return first list
    ((<= (car lst1) (car lst2))
     (cons (car lst1) (merge-sorted (cdr lst1) lst2)))  ;; Pick from lst1
    (t
     (cons (car lst2) (merge-sorted lst1 (cdr lst2)))))) ;; Pick from lst2
